generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  credits       Int       @default(10)
  storageUsed   Int       @default(0)
  storageLimit  Int       @default(5368709120) // 5GB in bytes
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  assets        Asset[]
  folders       Folder[]
  brandKit      BrandKit?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           Int      @id @default(autoincrement())
  name         String
  type         String   // marketing, avatar, product, etc.
  sourceUrl    String?
  script       String?  @db.Text
  audioUrl     String?
  videoUrl     String?
  thumbnailUrl String?
  duration     Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Asset {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   // MIME type
  size      Int      // Size in bytes
  url       String
  folderId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder    Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Folder?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: SetNull)
  children  Folder[] @relation("FolderToFolder")
  assets    Asset[]
}

model BrandKit {
  id              Int      @id @default(autoincrement())
  videoFormat     String   @default("9:16")
  language        String   @default("English")
  hasEndcard      Boolean  @default(false)
  endcardUrl      String?
  hasWatermark    Boolean  @default(false)
  watermarkUrl    String?
  backgroundColor String   @default("black")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String   @unique
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fonts           Font[]
  music           Music[]
  voices          Voice[]
  avatars         Avatar[]
}

model Font {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  brandKitId Int
  
  brandKit   BrandKit @relation(fields: [brandKitId], references: [id], onDelete: Cascade)
}

model Music {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  duration   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  brandKitId Int
  
  brandKit   BrandKit @relation(fields: [brandKitId], references: [id], onDelete: Cascade)
}

model Voice {
  id         Int      @id @default(autoincrement())
  name       String
  gender     String
  language   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  brandKitId Int
  
  brandKit   BrandKit @relation(fields: [brandKitId], references: [id], onDelete: Cascade)
}

model Avatar {
  id         Int      @id @default(autoincrement())
  name       String
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  brandKitId Int
  
  brandKit   BrandKit @relation(fields: [brandKitId], references: [id], onDelete: Cascade)
}

